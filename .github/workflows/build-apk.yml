name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-17-jdk python3-pip \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo5 \
          cmake libffi-dev libssl-dev \
          build-essential libltdl-dev \
          ccache
    
    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install --upgrade cython==0.29.33
        pip install buildozer
        pip install kivy[base]
        pip install pyjnius plyer
        pip install colorama appdirs sh jinja2 six
        
        # 验证安装
        python -c "import buildozer; print('Buildozer version:', buildozer.__version__)"
        python -c "import kivy; print('Kivy version:', kivy.__version__)"
        python -c "import cython; print('Cython version:', cython.__version__)"
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
    
    - name: Cache Buildozer dependencies
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-deps-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-deps-
    
    - name: Setup Android SDK
      run: |
        # 设置Android SDK环境变量
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-ndk-r25b
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
        
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/tools/bin" >> $GITHUB_PATH
        
        # 创建SDK目录结构
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
        mkdir -p $ANDROID_SDK_ROOT/tools/bin
        
        # 下载并安装Android SDK命令行工具
        echo "Downloading Android SDK command line tools..."
        cd $ANDROID_SDK_ROOT/cmdline-tools
        wget -q --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
          https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        
        if [ ! -f "commandlinetools-linux-9477386_latest.zip" ]; then
          echo "Failed to download SDK tools"
          exit 1
        fi
        
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest
        rm commandlinetools-linux-9477386_latest.zip
        
        # 创建兼容性链接
        ln -sf $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager $ANDROID_SDK_ROOT/tools/bin/sdkmanager
        ln -sf $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager $ANDROID_SDK_ROOT/tools/bin/avdmanager
        
        # 验证sdkmanager
        if [ ! -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
          echo "Error: sdkmanager not found!"
          exit 1
        fi
        
        # 自动接受所有Android SDK许可证
        echo "Accepting SDK licenses..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # 安装必要的SDK组件
        echo "Installing SDK components..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
          "platform-tools" \
          "build-tools;34.0.0" \
          "platforms;android-34" \
          "platforms;android-21" \
          "ndk;25.2.9519653" || true
        
        # 验证安装
        echo "Verifying SDK installation..."
        ls -la $ANDROID_SDK_ROOT/
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "build-tools not found"
        ls -la $ANDROID_SDK_ROOT/platforms/ || echo "platforms not found"
        
    - name: Build APK with Buildozer
      run: |
        # 确保buildozer.spec存在
        if [ ! -f "buildozer.spec" ]; then
          echo "Error: buildozer.spec not found!"
          exit 1
        fi
        
        # 显示buildozer.spec内容（调试用）
        echo "=== buildozer.spec content ==="
        cat buildozer.spec | head -50
        echo "=============================="
        
        # 设置环境变量
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-ndk-r25b
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/tools/bin
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        
        # 显示环境信息
        echo "=== Environment Information ==="
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer version)"
        echo "==============================="
        
        # 清理之前的构建（如果存在）
        buildozer android clean || true
        
        # 构建APK（增加详细输出）
        echo "Starting APK build..."
        set +e  # 允许命令失败而不立即退出
        buildozer -v android debug
        BUILD_EXIT_CODE=$?
        set -e  # 重新启用错误时退出
        
        # 检查构建结果
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Build failed with exit code: $BUILD_EXIT_CODE"
          echo "=== Debugging Information ==="
          
          # 显示.buildozer目录结构
          echo "📁 .buildozer directory structure:"
          find .buildozer -type f -name "*.log" 2>/dev/null | head -10 || echo "No log files found"
          
          # 显示最近的日志文件
          echo "📋 Recent log files:"
          find .buildozer -name "*.log" -type f -exec ls -la {} \; 2>/dev/null | tail -5 || echo "No recent logs"
          
          # 尝试显示构建日志的最后部分
          echo "📄 Last 50 lines of build log:"
          find .buildozer -name "*.log" -type f -exec tail -50 {} \; 2>/dev/null | tail -50 || echo "No build logs available"
          
          exit $BUILD_EXIT_CODE
        fi
        
        echo "✅ Build completed successfully!"
    
    - name: Find APK file
      id: find_apk
      run: |
        echo "🔍 Searching for APK files..."
        
        # 搜索APK文件
        APK_FILES=$(find . -name "*.apk" -type f)
        
        if [ -z "$APK_FILES" ]; then
          echo "❌ No APK file found!"
          echo "📁 Directory structure:"
          find . -type f -name "*.apk" -o -name "*.aab" -o -name "build.gradle" 2>/dev/null || echo "No build files found"
          
          echo "📋 Contents of bin directory (if exists):"
          ls -la bin/ 2>/dev/null || echo "bin directory not found"
          
          echo "📋 Contents of .buildozer directory:"
          find .buildozer -type f \( -name "*.apk" -o -name "*.aab" \) 2>/dev/null || echo "No APK/AAB files in .buildozer"
          
          exit 1
        fi
        
        # 选择第一个APK文件
        APK_PATH=$(echo "$APK_FILES" | head -1)
        echo "✅ APK found at: $APK_PATH"
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        
        # 获取APK文件名和信息
        APK_NAME=$(basename "$APK_PATH")
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        
        # 显示APK信息
        echo "📱 APK Information:"
        echo "   Name: $APK_NAME"
        echo "   Path: $APK_PATH"
        echo "   Size: $(du -h "$APK_PATH" | cut -f1)"
        echo "   Modified: $(stat -c %y "$APK_PATH" 2>/dev/null || stat -f %Sm "$APK_PATH" 2>/dev/null || echo 'Unknown')"
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: ${{ steps.find_apk.outputs.apk_path }}
        retention-days: 30
    
    - name: Upload APK as release asset (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_apk.outputs.apk_path }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build summary
      run: |
        echo "## 🎉 APK构建成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**APK文件:** ${{ steps.find_apk.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**文件路径:** ${{ steps.find_apk.outputs.apk_path }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 如何下载APK:" >> $GITHUB_STEP_SUMMARY
        echo "1. 点击页面上方的 **Artifacts** 部分" >> $GITHUB_STEP_SUMMARY
        echo "2. 下载 **android-apk** 文件" >> $GITHUB_STEP_SUMMARY
        echo "3. 解压下载的zip文件获取APK" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 APK信息:" >> $GITHUB_STEP_SUMMARY
        if [ -f "${{ steps.find_apk.outputs.apk_path }}" ]; then
          APK_SIZE=$(du -h "${{ steps.find_apk.outputs.apk_path }}" | cut -f1)
          echo "**文件大小:** $APK_SIZE" >> $GITHUB_STEP_SUMMARY
        fi